<Project>
    <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />
  
    <PropertyGroup>
        <Title>Lingua</Title>
        <Description>Natural language detection library for .NET, suitable for long and short text alike</Description>
        <TargetFramework>net8.0</TargetFramework>
    </PropertyGroup>

    <ItemGroup>
      <PackageReference Include="System.Text.Json" Version="8.0.3" />
    </ItemGroup>
  
    <ItemGroup>
      <EmbeddedResource Include="LanguageModels\**\*.json" />
    </ItemGroup>
  
    <ItemGroup>
      <InternalsVisibleTo Include="$(AssemblyName).IO" Key="$(PublicKey)" />
      <InternalsVisibleTo Include="$(AssemblyName).Tests" Key="$(PublicKey)" />
    </ItemGroup>

  <!-- Gzip embedded resources to reduce size -->
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
  <UsingTask TaskName="GZip"
             TaskFactory="RoslynCodeTaskFactory"
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]"
             Required="true" />
      <Result ParameterType="Microsoft.Build.Framework.ITaskItem[]"
              Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
    if (Files.Length > 0)
    {
        Result = new TaskItem[Files.Length];
        for (int i = 0; i < Files.Length; i++)
        {
            ITaskItem item = Files[i];
            string sourcePath = item.GetMetadata("FullPath");
            string sourceItemSpec = item.ItemSpec;              
            string destinationSuffix = ".gz";
            string destinationPath = sourcePath + destinationSuffix;
            string destinationItemSpec = sourceItemSpec + destinationSuffix;
  
            using (var sourceStream = File.OpenRead(sourcePath))
            using (var destinationStream = File.OpenWrite(destinationPath))
            using (var destinationGZip = new GZipStream(destinationStream, CompressionLevel.Optimal))
            {
                sourceStream.CopyTo(destinationGZip);
            }
                  
            var destinationItem = new TaskItem(destinationItemSpec);   
            Result[i] = destinationItem;
        }
    }
  ]]>
      </Code>
    </Task>
  </UsingTask>
  <Target Name="BeforeBuild">
    <GZip Files="@(EmbeddedResource)">
      <Output ItemName="GZipEmbeddedResource" TaskParameter="Result" />
    </GZip>
    <ItemGroup>
      <EmbeddedResource Remove="@(EmbeddedResource)" />
      <EmbeddedResource Include="@(GZipEmbeddedResource)" />
    </ItemGroup>
  </Target>
  
</Project>
